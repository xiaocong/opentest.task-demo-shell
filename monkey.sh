#!/bin/bash
########
# Created by Luke, 2012.10.10
# Truely wish all monkeys have their bananas.
########

lpkg=""

main()
{
	setpkg=false
	isleak=false
	isreboot=false
	while getopts "t:c:s:p:lrh" opt;do
		case $opt in
			t) throttleTIME=$OPTARG;;
			c) COUNT=$OPTARG;;
			s) ss="$OPTARG";;
			p) setpkg=true;
			   pkglist="$OPTARG";
			   ;;
			l) isleak=true;;
			r) isreboot=true;;
			h) usage;;
			\?) usage;;
		esac
	done
	[[ -z "$throttleTIME" ]] && throttleTIME=400
	[[ -z "$COUNT" ]] && COUNT=10000
	[[ -z "$ss" ]] && usage || ss="-s $ss"
	adb root
	sleep 3
	adb remount
	sleep 1
	echo -e "#\tPackageName\tResult\tmonkeyCommand\tComments" >> ./Result.xls
	#getsetpkg
	getpackage
	bananacraft
	result
}

getsetpkg()
{
	adb shell pm list package |  awk -F ":" '{print $2}' | grep -v demo | grep -v test | grep -v com.android.development > ./.pkg
	sed -i '/^$/d' $lpkglist
	hang=`grep -c "" $lpkglist`
	for n in `seq 1 $hang`;do
		setpkg[$n]="`awk 'NR=='$n'' $lpkglist | tr -d "\r"`"
		[ -z "`grep ${setpkg[$n]} ./.pkg`" ] && echo "Wrong pkg input in $lpkglist" && usage
	done
	
}

leaktest()
{
	imdone=false
	rm -rf ./.tpid
	until [ -n "`adb $ss shell ps | grep monkey`" ];do
		sleep 1
	done
	echo "`date +%x`: Getting Monkey status..."
	#lpkg="${pkg[$n]}"
	mkdir -p ./$n"_"$lpkg/$lpkg"_Leak"
	[ "$lpkg" = "com.android.contacts" ] && lpkg="android.process.acore"
	[ "$lpkg" = "com.android.providers.downloads.ui" ] && lpkg="android.process.media"
	while [ -z "$isnoact" ]; do
		echo "`date +%X`: Start Leak test.."
		adb $ss shell procrank | grep "$lpkg" | tail -n 1 | tee -a ./$n"_"$lpkg/$lpkg"_Leak"/$lpkg"_memory.xls"
		looped=1
		if [ -z $pid ]; then
			echo "`date +%X`: PID is not set."
			echo "`date +%X`: Writing PID..."
			export pid=`cat ./$n"_"$lpkg/$lpkg"_Leak"/$lpkg"_memory.xls" | awk 'NR==1 {printf $1}' | tee ./.tpid`
			echo "`date +%X`: PID is $pid." 
		fi
		export vpid=`cat ./$n"_"$lpkg/$lpkg"_Leak"/$lpkg"_memory.xls" | awk 'NR=='$looped' {printf $1}'`
		if [ "$vpid" != "$pid" ];then
			echo "`date +%X`: PID changed! Set it again."
			export pid=$vpid
			echo $pid > ./.tpid
			echo "`date +%X`: PID change to $pid"
		fi
		looped=$((looped+1))
		sleep 20
	done
	echo "`date +%X`: No need to test leak issue."
	echo -e "$n\t$lpkg\tN/A\tN/A\tBlock" >> ./memory_leak_result.xls
	rm -fr ./$n"_"$lpkg/$lpkg"_Leak"
	imdone=true
}

checkleak()
{
	echo "`date +%X`: Start checking memory"
	adb $ss shell input keyevent 4
	adb $ss shell input keyevent 4
	adb $ss shell input keyevent 4
	adb $ss shell input keyevent 4
	adb $ss shell input keyevent 4
	adb $ss shell screencap -p /data/local/tmp/"${pkg[$n]}".png
	adb $ss shell am dumpheap `cat ./.tpid` /sdcard/$lpkg.hprof
	adb $ss shell procrank | grep "${pkg[$n]}" | tail -n 1 | tee -a ./$n"_"$lpkg/$lpkg"_Leak"/$lpkg"_memory.xls"
	echo "`date +%X`: General files, please wait 10 seconds..."
	sleep 10
	adb $ss shell procrank | grep "${pkg[$n]}" | tail -n 1 | tee -a ./$n"_"$lpkg/$lpkg"_Leak"/$lpkg"_memory.xls"
	hanguss=`grep -c "" ./$n"_"$lpkg/$lpkg"_Leak"/$lpkg"_memory.xls"`
	firstuss=`cat ./$n"_"$lpkg/$lpkg"_Leak"/$lpkg"_memory.xls" | grep $lpkg | awk 'NR==1 {printf $5}' | tr -cd "[0-9]"`
	lastuss=`cat ./$n"_"$lpkg/$lpkg"_Leak"/$lpkg"_memory.xls" | grep $lpkg | awk 'NR=='$hanguss' {printf $5}' | tr -cd "[0-9]"`
	echo $lastuss $firstuss
	if [ $((lastuss-firstuss)) -ge 3072 ]; then
		echo "`date +%X`: $lpkg is Fail for leak test."
		echo -e "$n\t$lpkg\t$firstuss\t$lastuss\tFail" >> ./memory_leak_result.xls
		echo "`date +%X`: Pulling files"
		loger
		echo "`date +%X`: Clearing phone momory..."
	else
		echo "`date +%X`: $lpkg is OK for leak test."
		echo -e "$n\t$lpkg\t$firstuss\t$lastuss\tPass" >> ./memory_leak_result.xls
	fi
}


usage()
{
	adb devices
	echo "`basename $0` [-t MILLISEC] [-c COUNT] [-s serial_number] [-l] [-r] [-h]"
	echo "-l	Leak test included"
	echo "-r	Reboot after running each package"
	echo "-t	--throttle MILLISEC, interval of each event"
	echo "-c	Event COUNT of monkey"
	echo "-s	For multi-device"
	echo "-h	Show this help"
	exit
}

getpackage()
{
	adb shell pm list package |  awk -F ":" '{print $2}' | grep -v demo | grep -v test | grep -v com.android.development > ./.pkg
	hang=`grep -c "" ./.pkg`
	for l in `seq 1 $hang`;do
		pkg[$l]="`awk 'NR=='$l'' ./.pkg | tr -d "\r"`"
	done
}

bananacraft()
{
	for n in `seq 1 $hang`;do
		isnoact=""
		mkdir ./$n"_"${pkg[$n]}
		echo "`date +%X`: ------------------------------------------------------------------------------------------"
		echo "`date +%X`: Try to run monkey with ${pkg[$n]}..."
		R=`date +%N`
		echo "`date +%X`: Seed is $R."
		sleep 1
		echo "`date +%X`: monkey runing..."
		if [ -n "`echo ${pkg[$n]} | grep camera`" ]; then 
			interval=1000
		fi
		if [ -n "`echo ${pkg[$n]} | grep "calendar"`" -o -n "`echo ${pkg[$n]} | grep "searchbox"`" ];then
			dontanr="-c android.intent.category.LAUNCHER"
		else
			dontanr=""
		fi
		lpkg="${pkg[$n]}"
		$isleak && leaktest &
		adb $ss shell monkey -p ${pkg[$n]} -s $R -v -v -v --pct-touch 70 --throttle $throttleTIME $COUNT $dontanr > ./$n"_"${pkg[$n]}/"monkey_"${pkg[$n]}.txt
		adb $ss shell screencap -p /data/local/tmp/"${pkg[$n]}".png
		mcmd="adb $ss shell monkey -p ${pkg[$n]} -s $R -v -v -v --pct-touch 70 --throttle $throttleTIME $COUNT $dontanr"
		isnoact=`cat ./$n"_"${pkg[$n]}/"monkey_"${pkg[$n]}.txt | grep "$noact"`
		isok=`cat ./$n"_"${pkg[$n]}/"monkey_"${pkg[$n]}.txt | grep "$lastlineok"`
		until $imdone;do
			sleep 1
		done
		kill -9 %"`jobs | grep "leaktest" | awk '{print $1}' |tr -cd 0-9`"
			
		if [ -n "$isnoact" ];then
			echo "`date +%X`: ${pkg[$n]} shall be ignore since no activities to run"
			echo -e "$n\t${pkg[$n]}\tBlock\t$mcmd\tNo activities." >> Result.xls
		elif [ -n "$isok" ]; then
			echo "`date +%X`: monkey ran without errors"
			echo -e "$n\t${pkg[$n]}\tPass\t$mcmd" >> Result.xls
			$isleak && checkleak
			$isreboot && preboot
		else
			echo "`date +%X`: Error happened.."
			wocao=`adb devices | grep $ss`
			if [ -z "$wocao" ]; then
				echo "`date +%X`: adb $ss disconected...."
				echo "`date +%X`: Test stop at ${pkg[$n]}"
				echo "`date +%X`: Test stop at ${pkg[$n]}"
				echo "`date +%X`: Test stop at ${pkg[$n]}"
				echo -e "$n\t${pkg[$n]}\tBlock\t$mcmd\tadb $ss disconected." >> Result.xls
				echo "`date +%X`: Try to wait phone recover.."
				recv=0
				while true;do
					wocao=`adb devices | grep $ss`
					if [ -z "$wocao" ];then
						echo "`date +%X`: Still not.."
						sleep 1
						recv=$((recv+1))
					else
						echo "`date +%X`: ADB is ok again, continue.."
						loger
						$isreboot && preboot
						break
					fi
					if [ $recv -eq 60 ]; then
						echo "`date +%X`: Timeout.. All failed"
						doom=1
						break
					fi
				done
				[[ $doom -eq 1 ]] && break
			else
				echo -e "$n\t${pkg[$n]}\tFail\t$mcmd\tPlease check logs." >> Result.xls
				sleep 3
				loger
				$isreboot && preboot
				#kmedia=`adb $ss shell ps | grep mediaserver | awk '{printf $2}'` 
				#adb $ss shell kill -9 $kmedia
				#adb $ss shell input keyevent 20
				#adb $ss shell input keyevent 23
				#echo "Multimedia server killed."
			fi
		fi
		echo "`date +%X`: Start next loop in 10s..."
		sleep 10
		adb $ss shell rm -r /data/local/tmp/"${pkg[$n]}".png
	done
		
		
}


loger()
{
	mkdir ./$n"_"${pkg[$n]}/logs
	echo "`date +%X`: Catching logs for monkey test"
	$isleak && adb $ss pull /sdcard/${pkg[$n]}.hprof ./$n"_"$lpkg/$lpkg"_Leak"/
	adb $ss pull /data/local/tmp ./$n"_"${pkg[$n]}/logs
	adb $ss pull /data/anr ./$n"_"${pkg[$n]}/logs
	adb $ss pull /data/system/dropbox/ ./$n"_"${pkg[$n]}/logs
	adb $ss shell dumpsys > ./$n"_"${pkg[$n]}/logs/dumpsys.txt
	# adb $ss shell rm -r /logs/aplog.[0-9][0-9] > /dev/null
	# adb $ss shell rm -r /logs/aplog.[456789] > /dev/null
	# adb $ss shell rm -r /logs/"${pkg[$n]}".png
	adb $ss shell rm -r /data/system/dropbox/*
}

result()
{
	if [ "$n" = "$hang" ];then
		echo "`date +%X`: All monkeys have their bananas now."
	fi
	echo "`date +%X`: 
	###############################
	Total package: $n
	Pass: `cat ./Result.xls | grep Pass | grep -c ""`
	Fail: `cat ./Result.xls | grep Fail | grep -c ""`
	Block: `cat ./Result.xls | grep Block | grep -c ""`
	###############################
	"
	echo -e "\n\tTotal\t$n
	Pass\t`cat ./Result.xls | grep Pass | grep -c ""`
	Fail\t`cat ./Result.xls | grep Fail | grep -c ""`
	Block\t`cat ./Result.xls | grep Block | grep -c ""`
	">> ./Result.xls
	chmod 777 -R ./
}

preboot()
{
	echo "`date`: Now, reboot..."
	adb $ss shell reboot
	dur=1
	while true;do
		adbstate="`adb devices | grep $ss`"
		sleep 1
		if [ -n "$adbstate" ];then
			adb $ss  logcat -d | grep "BOOT_COMPLETED" > ./.Boot.log
			rpower="`cat ./.Boot.log | grep "BOOT_COMPLETED"`"
			rpower2="`cat ./.Boot.log | grep -i "BOOTCOMPLETED"`"
			sleep 1
			if [ -n "$rpower" -o -n "$rpower2" ]; then
				echo "Powered up!"
				break
			fi
		fi
		if [ $dur -eq 80 ];then
			echo "Phone did not power up!"
			logger
			cleanup
			exit 1
		fi
		dur=$((dur+1))
	done
	sleep 10
	echo "`date`: Unlocking..."
	adb $ss shell input swipe 775 280 965 280

	adb $ss root
	sleep 3
	adb $ss remount
}



rm -fr ./monkey"_`date +%y%m%d`"
mkdir -p ./monkey"_`date +%y%m%d`"
cd ./monkey"_`date +%y%m%d`"
lastlineok="finished"
noact="No activities"
main $@ 2>&1 | tee ./monkey.log
